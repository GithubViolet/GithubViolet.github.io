<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>补考两天速通数据结构</title>
      <link href="/2023/09/06/%E8%A1%A5%E8%80%83%E4%B8%A4%E5%A4%A9%E9%80%9F%E9%80%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/09/06/%E8%A1%A5%E8%80%83%E4%B8%A4%E5%A4%A9%E9%80%9F%E9%80%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>数据结构快补考了 决定速通  </p><h4 id="第一周第一次"><a href="#第一周第一次" class="headerlink" title="第一周第一次"></a>第一周第一次</h4><h5 id="第十题wp："><a href="#第十题wp：" class="headerlink" title="第十题wp："></a>第十题wp：</h5><p>sum+&#x3D;++i &#x2F;&#x2F;意为每次循环i先自己加一 然后把加之后的i加到sum上面<br>如此一来 设一共循环k次<br>sum&#x3D;1+…..+k&lt;n<br>时间复杂度就是n的二分之一  </p><h4 id="第一周第二次"><a href="#第一周第二次" class="headerlink" title="第一周第二次"></a>第一周第二次</h4><h5 id="第三题wp："><a href="#第三题wp：" class="headerlink" title="第三题wp："></a>第三题wp：</h5><p>像这种删除第i个元素的代码填空题<br>不是j++——都行的<br>比如这题ptrl-&gt;data[j-1]&#x3D;ptrl-&gt;data[j]<br>如果j–的话 自始至终数列都在赋同一个值 因此得j++<br>其实形象点说<br>就是给自己的前一位元素赋值 自己得不断往前才行<br>相同的<br>给自己的后一位赋值（data【j+1】&#x3D;data【j】） 自己得不断往后（j–）  </p><h5 id="第十题："><a href="#第十题：" class="headerlink" title="第十题："></a>第十题：</h5><p>顺序表访问的时间复杂度是O(1) 这个的意思不是给你个值要你去匹配 而是告诉你第i个元素</p><h5 id="第十四题"><a href="#第十四题" class="headerlink" title="第十四题"></a>第十四题</h5><h4 id="第四周第二次"><a href="#第四周第二次" class="headerlink" title="第四周第二次"></a>第四周第二次</h4><h5 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h5><p>入队列：进行<strong>插入</strong>操作的一端称为<strong>队尾</strong> 。</p><p>出队列：进行删除操作的一端称为队头。  </p><h5 id="第十一题"><a href="#第十一题" class="headerlink" title="第十一题"></a>第十一题</h5><p>c选项+maxsize化简其实是在外面+1 这题就无脑记%maxsize就行  </p><h5 id="第十六题"><a href="#第十六题" class="headerlink" title="第十六题"></a>第十六题</h5><p>符号不用管出入栈 反正遇到符号弹出两个 再把结果塞回去就行  </p><h5 id="第二十六题"><a href="#第二十六题" class="headerlink" title="第二十六题"></a>第二十六题</h5><h5 id="第二十七题"><a href="#第二十七题" class="headerlink" title="第二十七题"></a>第二十七题</h5><h5 id="第二十八题"><a href="#第二十八题" class="headerlink" title="第二十八题"></a>第二十八题</h5><h4 id="第五周第二次"><a href="#第五周第二次" class="headerlink" title="第五周第二次"></a>第五周第二次</h4><h5 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h5><p>KMP算法的匹配模式是找到不匹配前子串和主串的最长相等前后缀，然后把子串的最长相等前缀移动到主串的最长相等后缀。<br>next值是找到当前元素<strong>之前</strong>的最长相等前后缀的长度  </p><h5 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h5><p>nextval从0开始<br>nextval就是通过next值匹配到前面的字符，不同字符nextval就等于自己的next，相同字符nextval就等于前一个字符的nextval值（有替身就用替身）</p><h4 id="第七周第二次"><a href="#第七周第二次" class="headerlink" title="第七周第二次"></a>第七周第二次</h4><h5 id="二叉树公式："><a href="#二叉树公式：" class="headerlink" title="二叉树公式："></a>二叉树公式：</h5><p>总结点数N&#x3D;n0+n1+n2&#x3D;n1+2n2<br>总结点数N&#x3D;2的n次方-1<br>最大层节点数：N&#x3D;2的n-1次方</p><h5 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h5><p>注意顺序存储。</p><p><img src="/%5Cimages%5Cpasted-28.png" alt="upload successful"></p><h5 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h5><p>二叉树二叉链表指的是每个节点都分出左右小孩（三叉链表多出了个parent指针域）<br>因此这题n个节点2n个指针域，由于一共只有n-1个节点可以占指针域<br>因此有n+1个空指针域  </p><h5 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h5><p>思维存在误区<br>第九层100个叶节点，但是不代表九层就是最后一层，还有可能是倒数第二层。<br>先求出九层非叶节点，继而得到十层的叶节点数<br>之后由于是完全二叉树，总结点数也就好求了。</p><h5 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h5><h4 id="第八周第三次"><a href="#第八周第三次" class="headerlink" title="第八周第三次"></a>第八周第三次</h4><h5 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h5><h5 id="第三题-1"><a href="#第三题-1" class="headerlink" title="第三题"></a>第三题</h5><p>这题想了好久还是百度了<br>一颗二叉树      n2+1&#x3D;n0<br>n棵二叉树（森林） n2+n&#x3D;n0  </p><h5 id="第五题-1"><a href="#第五题-1" class="headerlink" title="第五题"></a>第五题</h5><p>又一道想了好久的题  </p><p><img src="/%5Cimages%5Cpasted-29.png" alt="upload successful"></p><h5 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h5><p>边数+1&#x3D;节点数<br>因此这个大树一共有16个节点<br>剩下九个节点没有边 所以一共10棵树  </p><h5 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h5><p>拿简单二叉树当例子想一想就行了  </p><h4 id="第八周第二次"><a href="#第八周第二次" class="headerlink" title="第八周第二次"></a>第八周第二次</h4><h5 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a>第二题</h5><p>   23<br> 14   9<br>7  7<br>2 5<br>要求带权路径长度，之后把值x路径然后相加就行  </p><h5 id="第四题-1"><a href="#第四题-1" class="headerlink" title="第四题"></a>第四题</h5><p>每个字符的哈夫曼码长度一定是唯一的  </p><h5 id="第七题-1"><a href="#第七题-1" class="headerlink" title="第七题"></a>第七题</h5><p>如果是偶数的话意味着可以继续合成。  </p><h4 id="第六周第一次"><a href="#第六周第一次" class="headerlink" title="第六周第一次"></a>第六周第一次</h4><h5 id="第一题-1"><a href="#第一题-1" class="headerlink" title="第一题"></a>第一题</h5><p>强烈建议别空想 很容易元帝去世  </p><h5 id="第四题-2"><a href="#第四题-2" class="headerlink" title="第四题"></a>第四题</h5><p>注意上三角是右上三角，按列存储是从左上角开始存的  </p><h5 id="第五题-2"><a href="#第五题-2" class="headerlink" title="第五题"></a>第五题</h5><p>想的头都要裂开了 没想明白括号内外的+1哪来的<br>最后发现带入k&#x3D;1 i&#x3D;j&#x3D;1秒出B<br>这种b题还是得代入  </p><h5 id="第六题-1"><a href="#第六题-1" class="headerlink" title="第六题"></a>第六题</h5><p>小心镜像 还有c语言数组。  </p><h5 id="第七题-2"><a href="#第七题-2" class="headerlink" title="第七题"></a>第七题</h5><p><img src="/%5Cimages%5Cpasted-30.png" alt="upload successful"><br>三对角矩阵特征：除了首尾两个星，中间都是三颗星<br>所以2+3x28+2&#x3D;88<br>由于从零开始 所以87  </p><h5 id="第八题-1"><a href="#第八题-1" class="headerlink" title="第八题"></a>第八题</h5><h5 id="第九题-1"><a href="#第九题-1" class="headerlink" title="第九题"></a>第九题</h5><p>原来没说行储存列储存就是默认行吗  </p><h5 id="第十题-1"><a href="#第十题-1" class="headerlink" title="第十题"></a>第十题</h5><p>压缩矩阵的意思就是镜像  </p><h4 id="第六周第二次"><a href="#第六周第二次" class="headerlink" title="第六周第二次"></a>第六周第二次</h4><h5 id="第二题-2"><a href="#第二题-2" class="headerlink" title="第二题"></a>第二题</h5><p>十字链表是行链表和列链表，是和存储稀疏矩阵<br>三元组表包括行，列，元素大小，适合。<br>二叉链表是左右小孩，不合适  </p><h5 id="第三题-2"><a href="#第三题-2" class="headerlink" title="第三题"></a>第三题</h5><p>10 x 3 x 2 + 3 x 2 &#x3D; 66<br>还需要一个多的三元组来记录总行数总列数总元素值  </p><h5 id="第十三题"><a href="#第十三题" class="headerlink" title="第十三题"></a>第十三题</h5><p>错了两次了！！！！<br>一定要小心6，6那一行的上三角有七个数字（因为左边同行下三角有五个）<br>因此相加的时候不需要+7！  </p><h5 id="第十八题"><a href="#第十八题" class="headerlink" title="第十八题"></a>第十八题</h5><h4 id="第九周第三次"><a href="#第九周第三次" class="headerlink" title="第九周第三次"></a>第九周第三次</h4><h5 id="第七题-3"><a href="#第七题-3" class="headerlink" title="第七题"></a>第七题</h5><h5 id="第十题-2"><a href="#第十题-2" class="headerlink" title="第十题"></a>第十题</h5><p>换成无向图就是A<br>但是有向图是双向的，所以不需要除以二  </p><h5 id="第十一题-1"><a href="#第十一题-1" class="headerlink" title="第十一题"></a>第十一题</h5><h5 id="第十八题-1"><a href="#第十八题-1" class="headerlink" title="第十八题"></a>第十八题</h5><h5 id="第二十题"><a href="#第二十题" class="headerlink" title="第二十题"></a>第二十题</h5><p>无向图度数是边数的两倍  </p><h4 id="第十周第一次"><a href="#第十周第一次" class="headerlink" title="第十周第一次"></a>第十周第一次</h4><h5 id="第二题-3"><a href="#第二题-3" class="headerlink" title="第二题"></a>第二题</h5><p>无向图中，设n个顶点，最多n（n-1）&#x2F;2条边，转化过来就是n（n-1）度  </p><h5 id="第四题-3"><a href="#第四题-3" class="headerlink" title="第四题"></a>第四题</h5><p>怪怪的  网上的回答是如果（v1,v5）存在就一定会被访问到</p><h5 id="第六题-2"><a href="#第六题-2" class="headerlink" title="第六题"></a>第六题</h5><h5 id="第七题-4"><a href="#第七题-4" class="headerlink" title="第七题"></a>第七题</h5><h5 id="第十题-3"><a href="#第十题-3" class="headerlink" title="第十题"></a>第十题</h5><p>建议多做几遍 这题还建议斜着看 太抽象了  </p><h5 id="第十四题-1"><a href="#第十四题-1" class="headerlink" title="第十四题"></a>第十四题</h5><p>非连通图的意思是有个点啥都没连<br>（n-1）n&#x2F;2&lt;15    </p><h4 id="第十一周第一次"><a href="#第十一周第一次" class="headerlink" title="第十一周第一次"></a>第十一周第一次</h4><h5 id="第一题-2"><a href="#第一题-2" class="headerlink" title="第一题"></a>第一题</h5><p>可以通过n行n列判断出一共几个元素  </p><h4 id="算法合集"><a href="#算法合集" class="headerlink" title="算法合集"></a>算法合集</h4><p>Prim（普里姆）算法是生成最小生成树的算法，每次遍历都选所有选择当中最小的，然后重复n-1次<br>Kruskal（克什么什么）算法也是生成最小生成树的算法，旨在每次遍历都会挑出所有边当中最小的，挑着挑着形成最小生成树<br>Dijstra（迪杰）是用来算最短距离的。选定一个点后需要循环n-1次来确定这个点到剩下n-1个点的距离（也就是初始表格外要画n-1个distance表格和finish表格）。每次挑出最小距离并将一个finish表格里的false改成true，除此之外还要更新初始点通过这个点到其他点的最短距离。</p><h4 id="排序合集"><a href="#排序合集" class="headerlink" title="排序合集"></a>排序合集</h4><p>拓补排序：不断消除<strong>有向无环图</strong>的<strong>入度为零</strong>的数所得到的排序  </p><p>直接插入排序：将未排序部分依次向前匹配，直到找到合适的位置。稳定。时间复杂度O（n方）<br>选择排序：在未排序部分选择最小的元素，和已排序部分后一个元素交换位置。不稳定。O（n方）  </p><p>冒泡排序：每次沉底一个元素，稳定，O（n方）  </p><p>归并排序：不停一分为二成单个元素，然后重新排序。 稳定。O（nlogn）  </p><p>快速排序：设left最左 right最右 pivot储存left初始值。从left开始一个一个找，有比<strong>pivot</strong>大的直接pivot储存然后用right替掉该值，之后从right开始向左找，找到比<strong>pivot</strong>小的用left替换。<br>不稳定，O（nlgn），较有序的情况下变成O（n方）  </p><p>基数排序：先排个位数，然后拿个位数排序插入十位数，再排十位数，再排百位数。（注意先进先出）。  </p><p>堆排序：<br>大顶堆：树结点比左右子树都大。<br>把树化身成排序<br>然后把根节点换到最后<br>然后做调整，把现在的根节点不断往下换，直到重新形成新的大顶堆。重复即可。  </p><p>希尔排序：告诉你初始增量，元素除本身外再加相应数量，然后比较看是否需要交换。  </p><h5 id="第四题-4"><a href="#第四题-4" class="headerlink" title="第四题"></a>第四题</h5><p>可以理解但很怪，kruskal算法最终似乎需要扭曲一下才能得到树  </p><h5 id="第五题-3"><a href="#第五题-3" class="headerlink" title="第五题"></a>第五题</h5><p>kruskal算法适合稀疏的图，我猜是因为这种算法最后太容易成环。<br>这点和Prim相反，prim可能需要更多的选择和连通方式  </p><h5 id="第七题-5"><a href="#第七题-5" class="headerlink" title="第七题"></a>第七题</h5><h5 id="第九题-2"><a href="#第九题-2" class="headerlink" title="第九题"></a>第九题</h5><h4 id="第十二周第三次"><a href="#第十二周第三次" class="headerlink" title="第十二周第三次"></a>第十二周第三次</h4><h5 id="第四题-5"><a href="#第四题-5" class="headerlink" title="第四题"></a>第四题</h5><p>这种AOE网的最短时间都是最长路径。工程需要所有人都完工才行。</p><h5 id="第八题-2"><a href="#第八题-2" class="headerlink" title="第八题"></a>第八题</h5><h5 id="第九题-3"><a href="#第九题-3" class="headerlink" title="第九题"></a>第九题</h5><p>缩短任一关键路径会减少工程时间：不对，因为关键路径不一定唯一。  </p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>二分查找：又称折半查找，查找数组必须有序，而且查找次数为log2n+1（能整数就log2n）<br>二叉查找树：所有节点的左子树小于本身，右子树大于本身<br>二叉查找树查找元素的时间复杂度可能是log2n也可能是n（因为如果不平衡的话，就会变成单链表）<br>二叉查找树的画，只要不停根据左小右大的原则直接插入就行  </p><h4 id="第十三周第三次"><a href="#第十三周第三次" class="headerlink" title="第十三周第三次"></a>第十三周第三次</h4><h5 id="第二题第三题"><a href="#第二题第三题" class="headerlink" title="第二题第三题"></a>第二题第三题</h5><p>折半查找注意：min+max&#x3D;9.5 则取9，查询值和9比较后，<strong>min要变成10</strong><br>相当于接下来从第10个数到第19个数之间找值。  </p><h5 id="第十三题-1"><a href="#第十三题-1" class="headerlink" title="第十三题"></a>第十三题</h5><p>题目说邻接矩阵主对角线以下均为零，说明有向图不存在大指小<br>倘若这个前提下主对角线往上均为零，则说明最小的元素指向了所有元素，倒数第二的元素指向了除了最小元素以外的所有元素，以此类推。拓补序列只能唯一。（入度为0的逐个拆）<br>倘若主对角线往上不全为零，则拓步序列有更多可能性（建议举例123）  </p><h5 id="第十五题"><a href="#第十五题" class="headerlink" title="第十五题"></a>第十五题</h5><p>摁记吧  有向图转化为邻接表的时间复杂度为O（n+e）</p><h5 id="第六题-3"><a href="#第六题-3" class="headerlink" title="第六题"></a>第六题</h5><h4 id="第十四周第三次"><a href="#第十四周第三次" class="headerlink" title="第十四周第三次"></a>第十四周第三次</h4><h5 id="第三题-放"><a href="#第三题-放" class="headerlink" title="第三题 放"></a>第三题 放</h5><h5 id="第八题-3"><a href="#第八题-3" class="headerlink" title="第八题"></a>第八题</h5><p>平衡因子：左右子树高度之差<br>分支节点：非叶节点<br><img src="/%5Cimages%5Cpasted-31.png" alt="upload successful">  </p><h4 id="第十五周第一次"><a href="#第十五周第一次" class="headerlink" title="第十五周第一次"></a>第十五周第一次</h4><h5 id="第二题-4"><a href="#第二题-4" class="headerlink" title="第二题"></a>第二题</h5><p>同义词意味着会哈希到一块去，线性探测法就是不断去探测下一个看看有没有空位，有就入驻，没有就继续往后探测。因此次数为1+……+k</p><h5 id="第四题-6"><a href="#第四题-6" class="headerlink" title="第四题"></a>第四题</h5><p><img src="/%5Cimages%5Cpasted-32.png" alt="upload successful"> </p><h5 id="第六题-4"><a href="#第六题-4" class="headerlink" title="第六题"></a>第六题</h5><p>请注意最后放进表那下是不需要比较的  </p><h5 id="第十一题-2"><a href="#第十一题-2" class="headerlink" title="第十一题"></a>第十一题</h5><p>装填因子指的是已装个数&#x2F;总空间  </p><h5 id="第十二题"><a href="#第十二题" class="headerlink" title="第十二题"></a>第十二题</h5><p>放了 搞不懂  </p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p> 全部重新看一遍得了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>流量分析学习路程</title>
      <link href="/2023/08/25/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%A8%8B/"/>
      <url>/2023/08/25/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Misc流量分析"><a href="#Misc流量分析" class="headerlink" title="Misc流量分析"></a>Misc流量分析</h2><h5 id="题型一-明文"><a href="#题型一-明文" class="headerlink" title="题型一 明文"></a>题型一 明文</h5><p>最简单的一集<br>直接用wireshark打开流量包<br>然后<strong>ctrl＋F</strong>打开搜索栏<br><strong>分组列表</strong>选<strong>分组字节流</strong><br><strong>显示过滤器</strong>选<strong>字符串</strong><br>直接搜flag</p><h5 id="题型二-flag编码"><a href="#题型二-flag编码" class="headerlink" title="题型二 flag编码"></a>题型二 flag编码</h5><p>最常见是flag的十六进制 <strong>66 6c 61 67</strong><br>直接搜就行<br>搜到data<br>在中间白条处右键显示分组字节 然后复制到cyberchef<br>或者搜到id&#x3D;-1的sql注入 整段复制下来十六进制解码就行<br>脚本使用方法就是把脚本拖入流量包所在文件夹<br>在此打开终端 输入<br><code>py -2 脚本名称</code>（2是python版本号）<br>本文件夹会输出一个out.txt<br>直接在这个txt里面查找就行</p><h5 id="题型三-压缩包"><a href="#题型三-压缩包" class="headerlink" title="题型三 压缩包"></a>题型三 压缩包</h5><p>看看就好<br>教学视频逻辑链不完整</p><h6 id="例题一"><a href="#例题一" class="headerlink" title="例题一"></a>例题一</h6><p>首先打开例题流量包 发现协议不是TCP就是HTTP<br>顶部栏–统计–HTTP–请求–看到&#x2F;3.php的count显示为3（没看懂在干什么？）<br>直接在搜索框搜索HTTP<br>找到第一条HTTP右键–追踪流–TCP流  </p><p><img src="/%5Cimages%5Cpasted-2.png" alt="上面红色是发送包，下面蓝色是返回包"><br>上面红的是发送包 下面蓝色的是返回包<br>风二西的思路是靠返回包解析发送包内容<br>如图所示，在0流（右下角）（几流就是第几条的意思）的情况下，返回包是目录，即可分析发送包的内容是编辑目录   </p><p><img src="/%5Cimages%5Cpasted-3.png" alt="upload successful"><br>如上图所示 3流的情况下 返回包内容是压缩过后的<br>要找出压缩格式 所以盯上了发送包里面经过转换过后的很像base64的一串长码<br>解码后发现格式flag.tar.gz</p><p><img src="/%5Cimages%5Cpasted-4.png" alt="upload successful"><br>如上图所示 在TCP追踪流获得压缩格式信息后（感觉这之前所有步骤都没必要）<br>和之前flag编码题型一样 选择在<strong>中间白条处</strong>右键<strong>分组字节</strong><br>然后删掉头部的X@Y<br>然后根据删除的x@y占了三个字节而选择从3开始<br>设置解码为<strong>压缩格式</strong> 就直接出了<br>当然也可以导出<br>将<strong>显示为</strong>调为<strong>原始字符</strong><br>然后点<strong>save as</strong><br>命名为<strong>xxx.zip</strong> 出来再打开就可以了  </p><h6 id="例题二"><a href="#例题二" class="headerlink" title="例题二"></a>例题二</h6><p>日常统计–http–请求–看到占比67的php后缀<br>然后退出去搜http<br>在查看10流发现很长的一段base64后<br>在<strong>eq 10（10流）</strong>后加了段<strong>and http</strong></p><p><img src="/%5Cimages%5Cpasted-5.png" alt="upload successful"><br>点到最后一个的时候发现z2是十六进制<br>这种情况下一般都是传了文件<br>z1可以找到传的文件<br>z1点开显示分组字流 解码为base64 出现了zip的标识<br>z2导出命名为1.zip<br>右键notepad++打开 将16进制转换为ascll码<br>退出去直接点开压缩包即可</p><p><strong>以上为简单题当正常题做繁琐的思路过程<br>实际上基本上无脑搜http 在中间白条右键打开导出</strong>  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF MISC习题</title>
      <link href="/2023/08/25/BUUCTF%E4%B9%A0%E9%A2%98%E9%87%91%E4%B8%89/"/>
      <url>/2023/08/25/BUUCTF%E4%B9%A0%E9%A2%98%E9%87%91%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h2 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h2><p>本题考查的是找工具<br>首先打开zip<br>发现是动态图<br>动态图闪过flag<br>于是打开stegslove–analyse–frame browser（帧的浏览器）<br>不停切帧发现flag { hello hongke }<br>(虽然并不清楚为什么最后flag提交失败)<br>没事了 原来是hellohongke中间没有空格</p><h2 id="N种解决办法"><a href="#N种解决办法" class="headerlink" title="N种解决办法"></a>N种解决办法</h2><p>上来就遇到了解压后发现该应用无法打开的问题<br>上CSDN叫我打开属性，点兼容性（失败）<br>修改regedit表格（失败）<br>直接关闭windows defender（失败）<br>卸载火绒以关闭各种防护（失败）<br>尝试了半个晚上各种方式后建议我重装系统<br>我直接选择不做这题了（恼）<br>有被题目标题嘲讽到</p><h2 id="Wireshark-被嗅探的流量"><a href="#Wireshark-被嗅探的流量" class="headerlink" title="Wireshark&amp;&amp;被嗅探的流量"></a>Wireshark&amp;&amp;被嗅探的流量</h2><p>给了个流量包 搜flag直接出了</p><h2 id="乌峰镇会图"><a href="#乌峰镇会图" class="headerlink" title="乌峰镇会图"></a>乌峰镇会图</h2><p>拖入010editor搜flag直接出</p><h2 id="基础破解-rar"><a href="#基础破解-rar" class="headerlink" title="基础破解&amp;&amp;rar"></a>基础破解&amp;&amp;rar</h2><p>给了压缩包 提示四位数字密码<br>ARCHPR取消勾选用户自定义，然后取消勾选阿拉伯，范围只保留数字<br>爆破出密码后发现了末尾带&#x3D;号 拖进随波逐流出base64flag  </p><h2 id="ZIP伪加密"><a href="#ZIP伪加密" class="headerlink" title="ZIP伪加密"></a>ZIP伪加密</h2><p>没有给密码范围提示 ARCHPR行不通<br>求助CSDN后<br>发现要拖入010editor<br>将文件第一行的67位置 第五行的78位置改为00<br>之后文件就直接开了 出flag<br>补充知识点：<strong>未加密 伪加密 真加密</strong>  </p><p><img src="/%5Cimages%5Cpasted-6.png" alt="upload successful"><br>首先搞清楚图中有两个位置<br>504B0304是<strong>文件头标记</strong><br>504B0102是<strong>目录中的文件头标记</strong><br>他们都有<strong>全局方式位标记</strong><br>全局方式位标记<br>未加密 0000 0000<br>伪加密 0000 0900<br>真加密 0900 0900<br>题中虽然是看的是真加密但是题干提示了是伪加密<br>因此直接把两处都改成0000就出了<br>（全加密好像是用软件ziperello 碰到再说）  </p><h2 id="文件中的秘密"><a href="#文件中的秘密" class="headerlink" title="文件中的秘密"></a>文件中的秘密</h2><p>给了jpg 010editor没搜到<br>点开属性 备注中找到了flag<br>（网上还有notepad+用16进制打开的）  </p><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>utools扫下直接出</p><h2 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h2><p>给了jpg 拖入010拉到底发现有ningen.txt<br>于是怀疑有隐藏文件 打开linux 输入口令<br><code>binwalk -e 绝对路径</code><br>出了个包 在ARCHPR打开后<br>根据提示四位数字破解出flag<br>（纠正错误 ARCHPR是可以打开第一层未解压的文件的 只是不能直接拖进去而已）  </p><h2 id="小明的保险箱"><a href="#小明的保险箱" class="headerlink" title="小明的保险箱"></a>小明的保险箱</h2><p>给了jpg 010没结果<br>尝试分离文件<br>首先试了foremost 但是没找到output<br>口令 <code>foremost 文件</code><br>然后 <code>binwalk -e 文件</code><br>之后ARCHPR出了<br>这俩程序好像没什么区别 除了口令不一样外<br>foremost会产出名为output的文件<br>binwalk会给一个相同名字<br>的文件</p><h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h2><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>题目给了png 而且很明显暗示了LSB<br>可以使用stegslove或者zsteg<br>拖入stegsolve 点击左右 在red blue green发现上面隐藏了什么<br>点开analyse-&gt;data extract（数据提取）<br>将以上三色勾0   （这步是为了把最低位二进制提取出来）<br>然后勾lsb first  （是为了用lsb来解码）<br>最后save bin就出了</p><p><img src="/%5Cimages%5Cpasted-7.png" alt="upload successful"></p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>使用zsteg（专门针对lsb）<br>先口令<code>zsteg xxx.png</code>（目的应该是看看各通道有什么）  </p><p><img src="/%5Cimages%5Cpasted-8.png" alt="upload successful"></p><p>观察到b1,rgb有个png image data<br>所以针对该通道 提取<br><code>zsteg -e b1,rgb,lsb,xy 图片名 &gt; out.png</code>  </p><p><img src="/%5Cimages%5Cpasted-9.png" alt="upload successful"><br>扫二维码直接出了</p><h2 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h2><p>给了jpg<br>010打开发现有exif和flag.txt<br>遂查看备注发现“this is not passwd”<br>然后binwalk分离 得到zip<br>拖入010发现 全局方位标记两个0900<br>但是完全改不了文件头 因为是只读模式<br>于是想到全加密破解  但是没有下软件<br>直接搜题告诉我 上面的“this is not passwd”就是密码  </p><h2 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a>easycap</h2><p>是流量题<br>直接搜没搜出来<br>一看全是TCP 右键追踪TCP流就直接出了  </p><h2 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h2><p>给了jpg 直接010后base64秒了  </p><h2 id="另外一个世界"><a href="#另外一个世界" class="headerlink" title="另外一个世界"></a>另外一个世界</h2><p>终于来了点脚本题了<br>首先做个补充<br><strong>DEC是十进制 HEX是十六进制 BIN是二进制</strong><br>首先给了jpg 拖入010后发现末尾有一串二进制<br>在找flag和binwalk失败后 决定从二进制入手<br>使用python脚本  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import binascii  //引入二进制转字符串功能</span><br><span class="line">flag=hex(int(&#x27;01101011011011110110010101101011011010100011001101110011&#x27;,2)) </span><br><span class="line">//int内部是将二进制转为十进制 ，hex（十进制）能转换为十六进制 但是hex（二进制）会报错</span><br><span class="line">print(flag) //得到十六进制的flag</span><br><span class="line">binascii_a2b.hex(6b6f656b6a3373)  //这一行的意思是将hex转为二进制字符串</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>第一次敲python代码有被抽象到<br>基本思路： 引入代码功能-&gt;转化为十进制-&gt;转化为十六进制-&gt;转化为二进制字符串<br>这还真是另一个世界。</p><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><p>开始感觉到上强度了<br>给了png 010无收获后果断zsteg<br>但是报错了 提取不出来</p><p><img src="/%5Cimages%5Cpasted-10.png" alt="upload successful"><br>可以知道有个zip 但是提取完找不到<br>于是求助stegsolve<br>切换图片后找半天还是找不到 查了才发现这里要直接蒙<br>redbluegreen勾选0 然后lsbfirst 直接savebin<br>由于前面知道了zip 所以命名1.zip<br>打开告诉我损坏了打不开<br>于是右键bandzip强行打开 然后点开后根据提示搜hctf就出了  </p><h2 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h2><p>上来给了一张图  和一个zip</p><p><img src="/%5Cimages%5Cpasted-15.png" alt="upload successful"><br>查了才知道下面的是盲文<br>对照表格出了密码<br>bandzip打开压缩包 输入密码 出来wav<br>audacity寻找线索无果 但是听得出来是morse<br>果断上外网进入 <a href="morsecode.world">morsecode.world</a><br>然后听声得到</p><p><img src="/%5Cimages%5Cpasted-16.png" alt="upload successful"><br>注意别开英译中 还有就是拉丁文不用改成阿拉伯文<br>上传之后识别就行 最后把CTF删掉 然后把剩余字母改小写然后flag套起来就可以了  </p><h2 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h2><p>题目给了zip 解压后是一堆文件 看不懂<br>题解说了这个是webshell攻击<br>估计是要我们找到那个隐藏漏洞的文件<br>于是找到webshell查杀工具D盾<br>将下好的文件拖进去 找到一个标红的文件include.php  </p><p><img src="/%5Cimages%5Cpasted-17.png" alt="upload successful"><br>010打开 之后就直接找到passwd了<br>（这题还是假装没看到被火绒拦截的include.php吧<br>下次遇到被拦截的直接隔离区复活它然后拖入010好了）  </p><h2 id="Webshell后门"><a href="#Webshell后门" class="headerlink" title="Webshell后门"></a>Webshell后门</h2><p>与上面这题如出一辙 不多赘述  </p><h2 id="来一首歌吧"><a href="#来一首歌吧" class="headerlink" title="来一首歌吧"></a>来一首歌吧</h2><p>给了段音频<br>拖进audacity 发现是morse摩斯密码<br><strong>摩斯密码</strong>很好手敲 但是在和其他音乐砸在一起的时候 在线网站无法识别<br>这个时候就需要我们根据音频手打<br>一共就三种按键<br><strong>长  -<br>短  .<br>空格</strong><br>最后翻译出来就是<br>….. -… -.-. —-. ..— ….. -…. ….- —-. -… —– .—- —.. —..<br>..-. ….. ..— . -…. .—- –… -.. –… —– —-. ..— —-. .—- —.<br>.—- -.-.<br>敲了老半天最后是错的 麻了  </p><h2 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h2><p>题目透露宽带数据<br>给了个bin结尾的文件<br>所以求助软件routepasswordview<br>使用软件打开后搜flag没搜到<br>开始搜password<br>搜到俩 挨个试<br>都不对<br>查了之后才发现passwd上面的username才是flag  </p><h2 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h2><p>搞这题到半夜三点<br>半夜遇到这题真是折磨<br>首先给了jpg<br>binwalk后出了文件夹 给了个flag.vmdk<br>查了才知道这是伪加密 可以用<strong>7z直接解压vmdk后缀</strong><br>然后在主机下了7z 研究了半天最后还是从7z直接打开了文件夹<br>出来两个分开的flag 第一个是<br>+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++.+ +++++ .&lt;+++ [-&gt;– -&lt;]&gt;- -.+++ +++.&lt;<br>++++[ -&gt;+++ +&lt;]&gt;+ +++.&lt; +++++ +[-&gt;- —– &lt;]&gt;– —– –.&lt;+ +++[- &gt;—-<br>&lt;]&gt;– —– .&lt;+++ [-&gt;++ +&lt;]&gt;+ +++++ .&lt;+++ +[-&gt;- —&lt;] &gt;-.&lt;+ +++++ [-&gt;++<br>++++&lt; ]&gt;+++ +++.&lt; +++++ [-&gt;– —&lt;] &gt;—- -.+++ .&lt;+++ [-&gt;– -&lt;]&gt;- —– .&lt;<br>类似这样的brainfuck解码<br>第二个死活找不到网上wp的文件<br>后来才发现他们全是用的<strong>kali自带的7z解压</strong><br><strong>只有在kali解压才能爆隐藏文件</strong><br>又找了半天kali的7z在哪<br>最后决定用口令<br><code>7z x 文件名 -o./</code><br>这里又有坑 x不能带- ，-o后面别忘了那个点<br>否则都会报错<br>output又找了半天 最后发现-o后面跟的就是文件名 所以自动给我堆在kali系统的一堆文件里面了  又试了下desktop也不好使 啥也没显示 最后强行找出来了<br>以后-0.&#x2F;后面就跟桌面上的幸运文件好了<br>睡大觉去了</p><h2 id="二维码-1"><a href="#二维码-1" class="headerlink" title="二维码"></a>二维码</h2><p>给了后缀为png的二维码<br>扫完之后说secret is here  但不是flag<br>010没有发现<br>果断zsteg 但是报错了<br>只好去查 最后发现思维固化了<br><strong>png也是可以用binwalk的</strong><br>之后爆出来个文件夹<br>（插入一个小发现 kali爆出来的文件夹 会给一个zip和一个文件 总是让人不知道到底该去7z哪个 最后发现那个文件就是zip里面的 直接去解压文件就行）<br>给了个fournumber.txt 加密了<br>一开始以为是伪加密 但是7z解压后没反应<br>后来看到文件名 发现是爆破 ARCHPR直接出  </p><h2 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h2><p>半夜睡不着爬起来写题<br>给了jpg<br>日常010后<br>binwalk -e分离<br>分离出来一个损坏的图片 和一个zip<br>明确的思路就是破解图片 得到zip的密码<br>查了之后发现是伪加密<br>7z无果后 再查发现需要去修改图片的头文件<br>但是binwalk开出来的图片甚至是0字节 010里面啥都没有<br>只好效仿网上的代码  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(从桌面打开终端很重要 因为output才会跑到桌面上来)</span><br><span class="line">binwalk 文件名 //解析文件</span><br><span class="line">foremost 文件名 //分离文件</span><br><span class="line">ls //展开目录 </span><br><span class="line">tree output/  //展示output里面内容  </span><br></pre></td></tr></table></figure><p>foremost分离之后终于找到了不是零字节的损坏图片<br>但是foremost分离不会单独把图片从zip里面拖出来<br>意味着010没法直接打开图片<br>所以直接把zip拖入010<br>搜索PK（二进制就是504B0102）<br>伪加密都要改这个（除了7z直接跳过伪加密）  </p><p><img src="/%5Cimages%5Cpasted-18.png" alt="upload successful"><br>把箭头处的0108改成0008<br>之后图片就恢复了（伪加密一直都是玄学 但最终规律都是改成00）<br>之后就需要找出jpg的隐写了<br>这里已经破案了<br>隐写png对应zsteg stegsolve<br>jpg对应steghide<br>口令<br><code>steghide extract -sf 文件名</code><br><img src="/%5Cimages%5Cpasted-20.png" alt="upload successful"><br>出来个ko.txt<br>cat ko.txt就出密码了<br>开了zip就出flag了</p><h2 id="认真你就输了"><a href="#认真你就输了" class="headerlink" title="认真你就输了"></a>认真你就输了</h2><h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><p>开头给了个xml后缀的表格<br>打开后发现是乱码<br>拖入010 看到头部PK<br>怀疑是zip 直接修改后缀名zip<br>之后在一堆杂文件里面找到chart 里面就有flag<br>（** 插一嘴 有时候win11会隐藏后缀 点查看-&gt;显示-&gt;文件扩展名 就行 **）  </p><h4 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h4><p>foremost之后解压就行   </p><h2 id="被劫持的礼物"><a href="#被劫持的礼物" class="headerlink" title="被劫持的礼物"></a>被劫持的礼物</h2><p>解压后发现是wireshark<br>http TCP追踪<br>根据题目提示 找到admin和word<br>连在一起<br>32哈希MD5小写加密就出了  </p><h2 id="藏藏藏"><a href="#藏藏藏" class="headerlink" title="藏藏藏"></a>藏藏藏</h2><p>7z解压后直接出<br>重点表扬flag<br>**flag{you are the best!} **  </p><h2 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a>被偷走的文件</h2><p>给了个pcapng流量包<br>搜flag找到flag.rar<br>于是foremost<br>遇到一个需要密码的zip<br>010什么都没看出来<br>ARCHPR直接出了  </p><h2 id="刷新过的图片"><a href="#刷新过的图片" class="headerlink" title="刷新过的图片"></a>刷新过的图片</h2><p>给了两个jpg<br>有一个是损坏的<br>根据题目提示 由于刷新是F5 所以是F5加密<br>kali下完之后 F5文件夹打开终端 输入口令<br><code>java Extract 文件名 </code><br>之后在F5文件夹找到output.txt<br>然后binwalk或者修改一下伪加密就出了<br>（伪加密的修改是第二个PK的9 10个字节改成PK）<br>这题我没做出来 因为我下的F5不听话 给的output全是0字节<br>两张图片放第一张就给0字节output<br>第二张就直接不停重复语句  </p><h2 id="佛系青年"><a href="#佛系青年" class="headerlink" title="佛系青年"></a>佛系青年</h2><p>给了张png还有一个加密包<br>一开始的思路是 png里面藏密码<br>但是foremost图片后 给了我张jpg 啥都看不出来 思路断了<br>查了才知道这张png啥用没有  （后来才知道foremost有时候会返回原图0000.jpg）<br>直接把<strong>整个文件</strong>拖入010<br>修改如图蓝色标注</p><p><img src="/%5Cimages%5Cpasted-21.png" alt="upload successful"><br>将如图所示的09改成了00<br>我发现伪加密去记第几个pk后第几位压根没用 每题修改位置都不一样<br><strong>直接找类似504B0102后面0900这样的格式就行</strong><br>之后给了段佛语<br>直接搜佛加密 找到在线网站就行</p><h2 id="你猜我是个啥"><a href="#你猜我是个啥" class="headerlink" title="你猜我是个啥"></a>你猜我是个啥</h2><p>给了个加密包<br>拖进010直接找到了flag  </p><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><p>给了jpg<br>foremost后给了个没加密的zip<br>里面两个未知后缀的文件<br>key文件打开base64 得到提示<br>What is Nicki Minaj’s favorite song that refers to snakes?<br>查了一下发现是anaconda<br>根据题目提示 知道了本题加密为Serpent（蛇）加密<br>加密key为anaconda<br><a href="http://serpent.online-domain-tools.com/">http://serpent.online-domain-tools.com/</a><br>这个是加密网站  </p><p><img src="/%5Cimages%5Cpasted-22.png" alt="upload successful"><br>选择file  输入key 就搞定了</p><h2 id="秘密文件"><a href="#秘密文件" class="headerlink" title="秘密文件"></a>秘密文件</h2><p>给了流量包<br>wireshark打开 搜flag 右键TCP<br>发现rar<br>foremost<br>之后ARCHPR就出了  </p><h2 id="just-a-rar"><a href="#just-a-rar" class="headerlink" title="just a rar"></a>just a rar</h2><p>文件名提示4number加密<br>ARCHPR<br>然后出了个jpg<br>010没发现 但是看到exif<br>看备注直接找到了flag  </p><h2 id="鸡你太美"><a href="#鸡你太美" class="headerlink" title="鸡你太美"></a>鸡你太美</h2><p>开头给了两个gif<br>一个完好一个损坏<br>损坏那个gif拖入010之后发现文件头不对<br>按照之前那个gif的文件头<br>在010 edit-&gt;插入四个字节<br>依次为47 49 46 38<br>然后修好gif之后就出flag了  </p><h2 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a>菜刀666</h2><p>熟悉的半夜 熟悉的强度题<br>给了流量包<br>在TCP7发现大量字符<br>看到z2&#x3D;FFD8以及末尾的FFD9<br>知道是jpg  </p><p><img src="/%5Cimages%5Cpasted-23.png" alt="upload successful"><br>回到流量包 在TCP7后面跟上and http<br>找到z2 点击显示分组字节 从第三个字节开始（要排除z2&#x3D;）  </p><p><img src="/%5Cimages%5Cpasted-24.png" alt="upload successful"><br>导出为1.txt<br>之后拖入010 然后导出jpg<br>就得到一张图片 写着this is passwd<br>但是之前看到流量包里面藏着zip<br>于是foremost以下 然后拿passwd解开了密码<br>flag就出了。<br>我看网上还有用脚本搞定十六进制的 大半夜就不折磨自己了 </p><h2 id="一叶障目"><a href="#一叶障目" class="headerlink" title="一叶障目"></a>一叶障目</h2><p>开头给了png<br>010打开发现crc报错<br>打开crc在线校验网站<br>输入第12-28位的16进制（ctrl+shift+c才能复制到左边）  </p><p><img src="/%5Cimages%5Cpasted-25.png" alt="upload successful"><br>将校验码与29-32位核对<br>发现不匹配 说明宽高被修改了<br>将图片和脚本放在同一个文件夹 打开终端python一下<br>脚本要修改一下里面的图片名称  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">import struct</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">crcbp = open(&quot;misc25.png&quot;, &quot;rb&quot;).read()    #打开图片</span><br><span class="line">crc32frombp = int(crcbp[29:33].hex(),16)     #读取图片中的CRC校验值</span><br><span class="line">print(crc32frombp)</span><br><span class="line"> </span><br><span class="line">for i in range(4000):                        #宽度1-4000进行枚举</span><br><span class="line">    for j in range(4000):                    #高度1-4000进行枚举</span><br><span class="line">        data = crcbp[12:16] + \</span><br><span class="line">            struct.pack(&#x27;&gt;i&#x27;, i)+struct.pack(&#x27;&gt;i&#x27;, j)+crcbp[24:29]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; 0xffffffff</span><br><span class="line">        # print(crc32)</span><br><span class="line">        if(crc32 == crc32frombp):            #计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定</span><br><span class="line">            print(i, j)</span><br><span class="line">            print(&#x27;hex:&#x27;, hex(i), hex(j))</span><br><span class="line">            exit(0)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>直接出了宽高  </p><p><img src="/%5Cimages%5Cpasted-26.png" alt="upload successful"><br>修改宽高  </p><p><img src="/%5Cimages%5Cpasted-27.png" alt="upload successful"><br>然后flag直接出了</p><p>补充：<br>1、开头的0~7八个字节为png的文件头：89 50 4E 47 0D 0A 1A 0A （固定格式）</p><p>2、8~11四个字节：00 00 00 0D 表示头部数据块的长度为13（固定格式）</p><p>3、12~15四个字节：49 48 44 52 表示文件头数据块的标示（固定格式）</p><p><strong>4、16~19四个字节：00 00 03 84表示图片的宽（不固定）</strong></p><p><strong>5、20~23四个字节：00 00 00 96表示图片的高（不固定）</strong></p><p>6、24~28五个字节：08 02 00 00 00表示Bit depth（图像深度）、ColorType（颜色类型）、 Compression method（压缩方法）、 Filter method（滤波器方法）、Interlace method（隔行扫描方法）这五个字节不固定，均为可变数据</p><p><strong>7、29~32四个字节：76 EC 1E 40为图片的crc校验值由从第12个字节到第28个字节的十七位字节进行crc计算得到</strong><br>（冷知识：字节是从00开始的 winhex里面行＋列&#x3D;当前字节所在位数）</p><h2 id="神奇的二维码"><a href="#神奇的二维码" class="headerlink" title="神奇的二维码"></a>神奇的二维码</h2><p>开局给了个二维码，扫完没什么发现<br>010没发现<br>三大隐写工具没什么发现 <strong>查了才知道binwalk -e才能出</strong><br>出了四个zip，其中一个是txt，base64后打开了里面的一个word<br>word里面藏了超大一串base64<br>网上猜是循环base64<br>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"> </span><br><span class="line">def decode(f):</span><br><span class="line">n = 0;</span><br><span class="line">while True:</span><br><span class="line">try:</span><br><span class="line">f = base64.b64decode(f)</span><br><span class="line">n += 1</span><br><span class="line">except:</span><br><span class="line">print(&#x27;[+]Base64共decode了&#123;0&#125;次，最终解码结果如下:&#x27;.format(n))</span><br><span class="line">print(str(f,&#x27;utf-8&#x27;))</span><br><span class="line">break</span><br><span class="line"> </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">f = open(&#x27;./flag.txt&#x27;,&#x27;r&#x27;).read()</span><br><span class="line">decode(f)</span><br></pre></td></tr></table></figure><p>得到密码comEON_YOuAreSOSoS0great<br>解开得到音频<br>熟悉的audacity 熟悉的morsecode.world<br>解开后得到flag{morseisveryveryeasy}  </p><h2 id="纳尼"><a href="#纳尼" class="headerlink" title="纳尼"></a>纳尼</h2><p>开头给了打不开的jpg<br>打开010之后发现文件头没显示jpg<br>插入四字节<br>47 49 46 38<br>打开之后stegsolve frame browser一下就行<br>（stegsolve突然不好使了 我强行文字识别的）  </p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何提交博客</title>
      <link href="/2023/08/24/MISC/"/>
      <url>/2023/08/24/MISC/</url>
      
        <content type="html"><![CDATA[<h2 id="提交博客流程"><a href="#提交博客流程" class="headerlink" title="提交博客流程"></a>提交博客流程</h2><p>首先打开blog文件夹<br>然后输入口令<br><code>hexo new title</code>      </p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>进入D:\Blog\Blog\source\ _posts<br>里面找到相应标题，用sudlime打开<br>写完之后照常   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  </span><br><span class="line">hexo g  </span><br><span class="line">hexo d  </span><br></pre></td></tr></table></figure><p>（没反应就多部署几次好了）</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>输入口令<br><code>hexo s -d</code><br>然后进入网址<br><a href="localhost%EF%BC%9A4000/admin">localhost:4000&#x2F;admin</a><br>在线网站进行编辑</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
